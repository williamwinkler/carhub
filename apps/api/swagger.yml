openapi: 3.0.0
paths:
  /v1/auth/register:
    post:
      operationId: AuthController_createAccount_v1
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Register an account
      tags: &a1
        - Auth
  /v1/auth/login:
    post:
      operationId: AuthController_login_v1
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "201":
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      tags: *a1
  /v1/auth/refresh:
    post:
      operationId: AuthController_refresh_v1
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenDto"
      responses:
        "201":
          description: Session succesfully refreshed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Get a new access token with your refresh token
      tags: *a1
  /v1/auth/logout:
    post:
      operationId: AuthController_logout_v1
      parameters: []
      responses:
        "204":
          description: User logged out successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      tags: *a1
      security:
        - bearer: []
        - apiKey: []
  /v1/auth/apiKey:
    post:
      operationId: AuthController_createApiKey_v1
      parameters: []
      responses:
        "201":
          description: The API key was successfully generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyResponseDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Generate an API key
      tags: *a1
      security:
        - bearer: []
        - apiKey: []
  /v1/users/me/favorite-cars:
    get:
      operationId: UsersController_getMyFavoriteCars_v1
      parameters:
        - name: limit
          required: false
          in: query
          description: The limit of items to be returned.
          schema:
            type: string
        - name: skip
          required: false
          in: query
          description: The amount of items to skip.
          schema:
            type: string
      responses:
        "200":
          description: User favorites retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarResponseListDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Get current user's favorite cars
      tags:
        - Users
      security:
        - bearer: []
        - apiKey: []
  /v1/cars:
    post:
      operationId: CarsController_create_v1
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCarDto"
      responses:
        "201":
          description: ar created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Create a car
      tags: &a2
        - Cars
      security:
        - bearer: []
        - apiKey: []
    get:
      operationId: CarsController_findAll_v1
      parameters:
        - name: sortDirection
          required: false
          in: query
          description: Sort direction (ascending or descending)
          schema:
            type: string
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: limit
          required: false
          in: query
          description: The limit of items to be returned.
          schema:
            type: string
        - name: skip
          required: false
          in: query
          description: The amount of items to skip.
          schema:
            type: string
        - name: color
          required: false
          in: query
          description: The color of the car.
          schema:
            type: string
            maxLength: 100
        - name: modelId
          required: false
          in: query
          description: The unique id of the car (UUID)
          schema:
            type: string
      responses:
        "201":
          description: ist of cars
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarResponseListDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: List cars
      tags: *a2
  /v1/cars/{id}:
    get:
      operationId: CarsController_findOne_v1
      parameters:
        - name: id
          required: true
          in: path
          description: The unique id of the car (UUID)
          schema:
            type: string
      responses:
        "200":
          description: Car successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Get a car
      tags: *a2
    put:
      operationId: CarsController_update_v1
      parameters:
        - name: id
          required: true
          in: path
          description: The unique id of the car (UUID)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCarDto"
      responses:
        "200":
          description: car was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CarResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Update a car
      tags: *a2
      security:
        - bearer: []
        - apiKey: []
    delete:
      operationId: CarsController_remove_v1
      parameters:
        - name: id
          required: true
          in: path
          description: The unique id of the car (UUID)
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Delete a car
      tags: *a2
      security:
        - bearer: []
        - apiKey: []
  /v1/cars/{id}/favorite:
    patch:
      operationId: CarsController_toggleFavorite_v1
      parameters:
        - name: id
          required: true
          in: path
          description: The unique id of the car (UUID)
          schema:
            type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDto"
      summary: Toggle favorite status for a car
      tags: *a2
      security:
        - bearer: []
        - apiKey: []
info:
  title: 🔥 Next Gen Nestjs API
  description: Demo API to showcase autogenerated Swagger docs from Zod schemas and tRPC.
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    ErrorDto:
      type: object
      properties:
        statusCode:
          description: The HTTP status code
          type: number
          enum:
            - 100
            - 101
            - 102
            - 103
            - 200
            - 201
            - 202
            - 203
            - 204
            - 205
            - 206
            - 207
            - 208
            - 210
            - 300
            - 301
            - 302
            - 303
            - 304
            - 307
            - 308
            - 400
            - 401
            - 402
            - 403
            - 404
            - 405
            - 406
            - 407
            - 408
            - 409
            - 410
            - 411
            - 412
            - 413
            - 414
            - 415
            - 416
            - 417
            - 418
            - 421
            - 422
            - 423
            - 424
            - 428
            - 429
            - 456
            - 500
            - 501
            - 502
            - 503
            - 504
            - 505
            - 507
            - 508
        errorCode:
          description: The application specific error code
          type: number
          enum:
            - 1000
            - 1001
            - 1002
            - 1003
            - 1004
            - 1005
            - 2000
            - 2001
            - 2002
            - 2003
            - 3000
            - 3001
            - 3002
            - 3003
            - 4000
            - 4001
        message:
          description: The error message
          type: string
        errors:
          description: Zod validation errors
          type: array
          items: {}
      required:
        - statusCode
        - errorCode
        - message
    RegisterDto:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          x-nestjs_zod-parent-additional-properties: false
        lastName:
          type: string
          minLength: 1
          x-nestjs_zod-parent-additional-properties: false
        username:
          type: string
          minLength: 3
          x-nestjs_zod-parent-additional-properties: false
        password:
          type: string
          minLength: 6
          x-nestjs_zod-parent-additional-properties: false
      required:
        - firstName
        - lastName
        - username
        - password
    UserDto:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          x-nestjs_zod-parent-additional-properties: false
        lastName:
          type: string
          minLength: 1
          x-nestjs_zod-parent-additional-properties: false
        username:
          type: string
          minLength: 3
          x-nestjs_zod-parent-additional-properties: false
        role:
          description: The role of the user
          type: string
          enum:
            - admin
            - user
          x-nestjs_zod-parent-additional-properties: false
        hasApiKey:
          description: Indicates whether or not the user has generated an API key
          type: boolean
          x-nestjs_zod-parent-additional-properties: false
        createdAt:
          description: The create date of the account
          type: string
          format: date-time
          pattern: ^(?:(?:\d\d[2468][048]|\d\d[13579][26]|\d\d0[48]|[02468][048]00|[13579][26]00)-02-29|\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\d|30)|(?:02)-(?:0[1-9]|1\d|2[0-8])))T(?:(?:[01]\d|2[0-3]):[0-5]\d(?::[0-5]\d(?:\.\d+)?)?(?:Z))$
          x-nestjs_zod-parent-additional-properties: false
        updatedAt:
          description: The last time the account was updated
          type: string
          format: date-time
          pattern: ^(?:(?:\d\d[2468][048]|\d\d[13579][26]|\d\d0[48]|[02468][048]00|[13579][26]00)-02-29|\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\d|30)|(?:02)-(?:0[1-9]|1\d|2[0-8])))T(?:(?:[01]\d|2[0-3]):[0-5]\d(?::[0-5]\d(?:\.\d+)?)?(?:Z))$
          x-nestjs_zod-parent-additional-properties: false
      required:
        - firstName
        - lastName
        - username
        - role
        - hasApiKey
        - createdAt
        - updatedAt
    UserResponseDto:
      type: object
      properties:
        apiVersion:
          type: string
          description: The version of the API
          example: 1.0.0
        data:
          description: The data of the response
          allOf:
            - $ref: "#/components/schemas/UserDto"
      required:
        - apiVersion
        - data
    LoginDto:
      type: object
      properties:
        username:
          description: The username of the user
          type: string
          minLength: 1
          maxLength: 80
        password:
          description: The password of the user
          type: string
          minLength: 5
          maxLength: 255
      required:
        - username
        - password
    JwtDto:
      type: object
      properties:
        accessToken:
          type: string
          format: jwt
        refreshToken:
          type: string
          format: jwt
      required:
        - accessToken
        - refreshToken
    JwtResponseDto:
      type: object
      properties:
        apiVersion:
          type: string
          description: The version of the API
          example: 1.0.0
        data:
          description: The data of the response
          allOf:
            - $ref: "#/components/schemas/JwtDto"
      required:
        - apiVersion
        - data
    RefreshTokenDto:
      type: object
      properties:
        refreshToken:
          type: string
          format: jwt
      required:
        - refreshToken
    ApiKeyDto:
      type: object
      properties:
        apiKey:
          description: The generated apiKey
          type: string
      required:
        - apiKey
    ApiKeyResponseDto:
      type: object
      properties:
        apiVersion:
          type: string
          description: The version of the API
          example: 1.0.0
        data:
          description: The data of the response
          allOf:
            - $ref: "#/components/schemas/ApiKeyDto"
      required:
        - apiVersion
        - data
    MetaPaginationDto:
      type: object
      properties:
        total:
          type: number
          description: The total number of items available across all pages
        limit:
          type: number
          description: The limit of items
        skipped:
          type: number
          description: Items skipped
        count:
          type: number
          description: The count of items
      required:
        - total
        - limit
        - skipped
        - count
    CarDto:
      type: object
      properties:
        year:
          description: The year the it was manufactored.
          type: integer
          minimum: 1886
          maximum: 2026
          x-nestjs_zod-parent-additional-properties: false
        color:
          description: The color of the car.
          type: string
          minLength: 0
          maxLength: 100
          x-nestjs_zod-parent-additional-properties: false
        kmDriven:
          description: The amount of kilometers the car has driven
          type: integer
          minimum: 0
          maximum: 10000000
          x-nestjs_zod-parent-additional-properties: false
        price:
          description: Price of the car in €
          type: integer
          minimum: 0
          maximum: 9007199254740991
          x-nestjs_zod-parent-additional-properties: false
        id:
          description: The unique id of the car (UUID)
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          x-nestjs_zod-parent-additional-properties: false
        createdBy:
          description: The user who created this car
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          x-nestjs_zod-parent-additional-properties: false
        createdAt:
          description: When the car record was created
          type: string
          format: date-time
          pattern: ^(?:(?:\d\d[2468][048]|\d\d[13579][26]|\d\d0[48]|[02468][048]00|[13579][26]00)-02-29|\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\d|30)|(?:02)-(?:0[1-9]|1\d|2[0-8])))T(?:(?:[01]\d|2[0-3]):[0-5]\d(?::[0-5]\d(?:\.\d+)?)?(?:Z))$
          x-nestjs_zod-parent-additional-properties: false
        updatedAt:
          description: When the car record was last updated
          type: string
          format: date-time
          pattern: ^(?:(?:\d\d[2468][048]|\d\d[13579][26]|\d\d0[48]|[02468][048]00|[13579][26]00)-02-29|\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\d|30)|(?:02)-(?:0[1-9]|1\d|2[0-8])))T(?:(?:[01]\d|2[0-3]):[0-5]\d(?::[0-5]\d(?:\.\d+)?)?(?:Z))$
          x-nestjs_zod-parent-additional-properties: false
        isFavorite:
          description: Indicates if the user has favorited the car or not
          type: boolean
          x-nestjs_zod-parent-additional-properties: false
      required:
        - year
        - color
        - kmDriven
        - price
        - id
        - createdBy
        - createdAt
        - updatedAt
        - isFavorite
    PaginatedItemsDto:
      type: object
      properties:
        meta:
          description: Metadata for pagination
          allOf:
            - $ref: "#/components/schemas/MetaPaginationDto"
        items:
          description: List of CarDto items
          type: array
          items:
            $ref: "#/components/schemas/CarDto"
      required:
        - meta
        - items
    CarResponseListDto:
      type: object
      properties:
        apiVersion:
          type: string
          description: The version of the API
          example: 1.0.0
        data:
          description: The data of the response
          allOf:
            - $ref: "#/components/schemas/PaginatedItemsDto"
      required:
        - apiVersion
        - data
    CreateCarDto:
      type: object
      properties:
        modelId:
          description: The ID of the model
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          x-nestjs_zod-parent-additional-properties: false
        year:
          description: The year the it was manufactored.
          type: integer
          minimum: 1886
          maximum: 2026
          x-nestjs_zod-parent-additional-properties: false
        color:
          description: The color of the car.
          type: string
          minLength: 0
          maxLength: 100
          x-nestjs_zod-parent-additional-properties: false
        kmDriven:
          description: The amount of kilometers the car has driven
          type: integer
          minimum: 0
          maximum: 10000000
          x-nestjs_zod-parent-additional-properties: false
        price:
          description: Price of the car in €
          type: integer
          minimum: 0
          maximum: 9007199254740991
          x-nestjs_zod-parent-additional-properties: false
      required:
        - modelId
        - year
        - color
        - kmDriven
        - price
    CarResponseDto:
      type: object
      properties:
        apiVersion:
          type: string
          description: The version of the API
          example: 1.0.0
        data:
          description: The data of the response
          allOf:
            - $ref: "#/components/schemas/CarDto"
      required:
        - apiVersion
        - data
    UpdateCarDto:
      type: object
      properties:
        modelId:
          description: The ID of the model
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          x-nestjs_zod-parent-additional-properties: false
        year:
          description: The year the it was manufactored.
          type: integer
          minimum: 1886
          maximum: 2026
          x-nestjs_zod-parent-additional-properties: false
        color:
          description: The color of the car.
          type: string
          minLength: 0
          maxLength: 100
          x-nestjs_zod-parent-additional-properties: false
        kmDriven:
          description: The amount of kilometers the car has driven
          type: integer
          minimum: 0
          maximum: 10000000
          x-nestjs_zod-parent-additional-properties: false
        price:
          description: Price of the car in €
          type: integer
          minimum: 0
          maximum: 9007199254740991
          x-nestjs_zod-parent-additional-properties: false
